###Constraint Satisfaction Problems

Defined by three factors:
- *Variables*
- *Domain*
- *Constraints*

Different types of constraints:
- *Unary Constraints*: Unary constraints involve a single variable in the CSP
- *Binary Constraints*
- *Higher-order Constraints*

**Backtracking**
```python
function BACKTRACKING-SEARCH(csp) return solution/failure
  return RECURSIVE-BACKTRACKING({}, csp)

function RECURSIVE-BACKTRACKING(assignment, csp) return soln/failure
  if assignment is complete return assignment
  var = SELECT-UNASSIGNED-VARIABLE(VARIABLES[csp], assignment, csp)
  for each value in ORDER-DOMAIN-VALUES(var, assignment, csp) do
    if value is consistent with assignment given CONSTRAINTS[csp] then
      add {var = value} to assignment
      result = RECURSIVE-BACKTRACKING(assignment, csp)
      if result is not failure return result
      remove {var = value} from assignment
  return failure
```
**Local Search**: Start with some random assignment to values then iteratively
select a random conflicted variable and reassign its value to the one that
violates the fewest constraints until no more constraint violations exist.
&emsp; Incomplete and suboptimal
&emsp; *Critical ratio*: around which using local search becomes extremely expensive.
 $$R = \frac{\text{number of constraints}}{\text{number of variables}}$$  

####Filtering
Check if we can prune the domains of unassigned variables ahead of time.

#####Forward Checking
Whenever a value is assigned to a variable $X_{i}$, prunes the domains of
unassigned variables that **share a constraint** with $X_{i}$ that would violate
the constraints if assigned.

#####Arc Consistency
We interpret each undirected edge of the constraint graph for a CSP as two
directed edges pointing in opposite directions. Each of these directed edges
is called an **arc**.

```python
func AC-3(csp) return the CSP, possibly with reduced domains
  inputs: csp, a binary CSP with all variables
  local variables: queue, a queue of arcs, initially all the arcs in CSP

  while queue is not empty do
    (tail, head) = REMOVE-FIRST(queue)
    if REMOVE-INCONSISTENCY-VALUES(tail, head) then
      for each neighbor in NEIGHBORS[tail] do
        add (neighbor, tail) to queue

func REMOVE-INCONSISTENCY-VALUES(tail, head) return true iff succeeds
  removed = false
  for each x in DOMAIN[tail] do
    if no value y in DOMAIN[head] allows (x, y) to satisfy the constraint
      then delete x from DOMAIN[tail]; removed = true
  return removed
```

**k-consistency**: when enforced guarantees that for any set of $k$ nodes in
the CSP, a consistent assignment to any subset of $k−1$ nodes guarantees that
the $k_{th}$ node will have at least one consistent value.
**strong k-consistency**: any subset of $k$ nodes is not only k-consistent
but also $k−1, k−2, \dots, 1$ consistent as well.  ``Think twice``

####Ordering

#####Minimum Remaining Values (MRV)
When selecting which variable to assign next, choose the one with the fewest
valid remaining values.

#####Least Constraining Values (LCV)
Select the value that prunes the fewest values from the domains of the
remaining unassigned values.

####Structure

**tree-structured CSP**: $O(d^{N}) \rightarrow O(n d^{2}))$
- pick an arbitrary node as the root
- linearize the tree
- perform a backwards pass of arc consistency
- perform a forward assignment

**cutset conditioning**: a cutset is the smallest subset of variables in a
constraint graph such that their removal results in a tree
&emsp; Assign all variables in the cutset and prune the domain of all neighboring nodes,
which lefts us with tree-structured CSPs.
&emsp; We need backtrack up to $d^c$ times (assume initial assign a cutset with
size $c$), each tree-structured CSP (with $n - c$ variables) can be solved in
$O((n-c) d^{2})$. Hence, the runtime is $O(d^{c} (n - c) d^{2})$.
